// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  password         String
  avatar           String?  // URL to avatar image
  joinDate         DateTime @default(now())
  resetToken       String?  // Password reset token (hashed)
  resetTokenExpiry DateTime? // Token expiry time
  orders           Order[]
  esims            Esim[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  accounts         Account[]
  sessions         Session[]
}

model Provider {
  id          String   @id @default(uuid())
  name        String   @unique
  displayName String
  apiKey      String
  plans       Plan[]
  esims       Esim[]
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plan {
  id            String   @id @default(uuid())
  country       String
  countryCode   String
  region        String?
  flag          String?
  dataAmount    Int      // in MB
  days          Int      // validity in days
  price         Float
  currency      String
  popular       Boolean  @default(false)
  featured      Boolean  @default(false)
  provider      Provider @relation(fields: [providerId], references: [id])
  providerId    String
  features      String[]
  networkType   String
  carriers      String[]
  coverage      String
  activation    String
  restrictions  String[]
  inStock       Boolean  @default(true)
  esims         Esim[]
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Order {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  plan        Plan?    @relation(fields: [planId], references: [id])
  planId      String?
  provider    Provider? @relation(fields: [providerId], references: [id])
  providerId  String?
  quantity    Int      @default(1)
  esims       Esim[]
  status      String   // e.g. PENDING, PAID, FAILED
  amount      Float
  currency    String
  paymentIntentId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Esim {
  id            String   @id @default(uuid())
  order         Order?   @relation(fields: [orderId], references: [id])
  orderId       String?
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  plan          Plan     @relation(fields: [planId], references: [id])
  planId        String
  provider      Provider @relation(fields: [providerId], references: [id])
  providerId    String
  iccid         String   @unique
  qrCodeUrl     String
  activationCode String
  status        String   // ACTIVE, INACTIVE, EXPIRED, PENDING
  dataLimit     Int      // in MB
  dataUsed      Int      @default(0)
  expiresAt     DateTime
  autoRenew     Boolean  @default(false)
  isRoaming     Boolean  @default(false)
  lastUsed      DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// NextAuth.js models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?     
  token_type         String?  
  scope              String?  
  id_token           String?  
  session_state      String?  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime

  @@unique([identifier, token])
}
